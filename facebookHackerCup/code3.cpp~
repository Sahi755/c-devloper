//g++ --std=c++14 code2.cpp -o code2 && code2:wd
//g++ --std=c++14 code3.cpp -o code3 && code3

#include<bits\stdc++.h>
#include<algorithm>
#include<string>
#include<set>
#define MOD1  1000000007
#define MOD2  1000000009 
#define Maxlenstr  10000000018
#define MODADD(a,b) a+b % MOD1
#define MODSUB(a,b,MOD1) a+b+MOD1 % MOD1  // Avoid negatives
#define MODMUL(l,a,b,MOD1) 1LL * a * b%MOD1  // Use 1LL to avoid overflow
#define  P  31             // Prime base	  
#define ll long long
using namespace std;
class Comparators{
public:static  bool maxpair(pair<int,int>a,pair<int,int>b){

			   return a.second<b.second;
		  }
};
class Algorithms{

      	static int mex(vector<int>&arr){

			  int n=arr.size();
			  vector<bool>present(n+1,false);

			  for(auto i:arr){
				  if(i>=0 && i<=n){
					   present[i]=true;
				  }  
			  }

			  for(int i=0;i<=n;i++){
				  if(!present[i]) return i;
			  }
			  return n+1;
		}

	     static void poweers(unsigned int n){
			  unsigned int ans=1;

			  while((ans<<1)<=n){
				  ans<<=1;
			  }
			  cout<<"laraget power:"<<ans<<endl;
		 }
};

class NewAlgo{

	public:
        static int gcd(int a, int b) {
       if (b == 0)
          return a;
         return gcd(b, a % b);
        }
         static int lcm(int a, int b) {
           return (a * b) / gcd(a, b);
      }

	   static int oddcount(int x){
	         
	           int count=0;
	           for(int i=0;i<=x;i++){
	               
	                if(i%2==1) count++;
	           }
	        return count;
	    }
	    
	  static int evencount(int x){
	        
	         int count=0;
	         for(int i=0;i<=x;i++){
	             if(i%2==0)count++;
	         }
	         return count;
	    }

	  static void equalstringsum(string s){

		    vector<unsigned int>vs;

				unsigned int sum1=0;
				unsigned int sum2=0;

				 for(int i=0;i<s.length();i++){
					   
					   int sum=s[i]-'0';
					   vs.push_back(sum);  	         	   
				 }
				 int n=vs.size()/2;
                 int count=0;
				 for(int i=0;i<n;i++){

					   sum1+=vs[i]; 
					   count++;
				 }
				 for(int i=count;i<6;i++){
					   sum2+=vs[i];
				 }
				 if(sum1==sum2){
					 cout<<"YES\n";
				 }else{
					 cout<<"NO\n";
				 }
	  }

	   static void Cointransform(ll x){
 
			   long long ans=1;
			   while(x>3){
				     x/=4;
					 ans*=2;
				}
			   cout<<ans<<endl;
 		 }

	    static bool perpectsqure(int n){

			  if(n<0) return false;

			  if(n==0) return true;

			  int root=sqrt(n);

			  return root*root==n;

		}

};
class Solution:public Comparators, Algorithms,NewAlgo{

	public:
	     static void solve(string s){
      

			 int count=0;

			 for(int i=0;i<s.length();i++){

				  if(s[i]=='1'){

					   count++;
				  }
			 }

			 cout<<count<<endl;
      }
		static void input(){	
		
			    int T;
				cin>>T;
				while(T--){

					int size;

					cin>>size;
					vector<int>arr(size);
					for(int i=0;i<size;i++)cin>>arr[i];			
					 
   				}
	       }

		static void singleInputs(){

             int T;
			 cin>>T;

			 while(T--){

			     string s;
				 cin>>s;

				solve(s);

			 }

    	}
};
int main(){

	Solution::singleInputs();
 }

