//g++ --std=c++14 code2.cpp -o code2 && code2:wd
//g++ --std=c++14 code3.cpp -o code3 && code3

#include<bits\stdc++.h>
#define MOD1  1000000007
#define MOD2  1000000009 
#define Maxlenstr  10000000018
#define MODADD(a,b) a+b % MOD1
#define MODSUB(a,b,MOD1) a+b+MOD1 % MOD1  // Avoid negatives
#define MODMUL(l,a,b,MOD1) 1LL * a * b%MOD1  // Use 1LL to avoid overflow
#define  P  31             // Prime base	  
#define ll long long
using namespace std;
class Comparators{

public:static  bool maxpair(pair<int,int>a,pair<int,int>b){

			   return a.second<b.second;
		  }

};
class Algorithms{

      	static int mex(vector<int>&arr){

			  int n=arr.size();
			  vector<bool>present(n+1,false);

			  for(auto i:arr){
				  if(i>=0 && i<=n){
					   present[i]=true;
				  }  
			  }

			  for(int i=0;i<=n;i++){
				  if(!present[i]) return i;
			  }
			  return n+1;
		} 
};

class NumberTeoryAl{
  

	public:
        static int gcd(int a, int b) {
       if (b == 0)
          return a;
         return gcd(b, a % b);
        }
         static int lcm(int a, int b) {
           return (a * b) / gcd(a, b);
      }
};
class Solution:public Comparators, Algorithms,NumberTeoryAl{

	public:
	        static void  solve(vector<int>&arr){

				int sum=0;

				for(int i=0;i<arr.size();i++){

					sum-=arr[i]+arr[i+1];
				}

		     cout<<sum<<endl;
      	}

		static void inputArray(){	
		     int T;
			 cin>>T;
		     while(T--){
				  int size;
				  int k;
				  cin>>size;
				  vector<int> newarr(size);

				for(int i=0;i<size;i++){
					 cin>>newarr[i];
				 }
				 solve(newarr);		
			} 
		}
};
int main(){

	Solution::inputArray();
 }

