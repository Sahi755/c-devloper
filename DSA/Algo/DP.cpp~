#include<iostream>
#include<bits\stdc++.h>
using namespace std;
class DP{

   public:

     static int fib(int n){

		 int dp[n+1];

		 memset(dp,-1,sizeof(dp));

		if(n<=1) return n;

		if(dp[n]!=-1) return dp[n];

		return dp[n]=fib(n-1)+fib(n-2);

	 }	

	 static int fib2(int n){

		  int dp[n+1];

	//	  memset(dp,-1,sizeof(dp));

		  dp[0]=0,dp[1]=1;

		  for(int i=2;i<=n;i++){

			  dp[i]=dp[i-1]+dp[i-2];

		  }

		 return dp[n];
	 }

	 static unsigned int fib3(unsigned int num){

		 int n1=0;
		 int n2=1;

		 if(num==0){

			 return 0;
		 }
		 for(int i=2;i<=num;i++){

			  int cure=n1+n2;

			  n1=n2;
			  n2=cure;
		 }

		 return n2;
	 }

};
int main(){

 
   int num;
   cin>>num;
 
   cout<<DP::fib3(num)<<endl;



    uint64_t big = 123456789012345ULL;
    std::cout << big << "\n";

	   uint32_t a = 100;   // Always 32 bits
    uint64_t b = 100;   // Always 64 bits
    std::cout << a << " " << b << "\n";


   

}
